
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "tutorials/torchrl_demo.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_tutorials_torchrl_demo.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_tutorials_torchrl_demo.py:


Introduction to TorchRL
============================
This demo was presented at ICML 2022 on the industry demo day.

.. GENERATED FROM PYTHON SOURCE LINES 8-126

It gives a good overview of TorchRL functionalities. Feel free to reach out
to vmoens@fb.com or submit issues if you have questions or comments about
it.

TorchRL is an open-source Reinforcement Learning (RL) library for PyTorch.

https://github.com/pytorch/rl

The PyTorch ecosystem team (Meta) has decided to invest in that library to
provide a leading platform to develop RL solutions in research settings.

It provides pytorch and **python-first**, low and high level
**abstractions** # for RL that are intended to be efficient, documented and
properly tested.
The code is aimed at supporting research in RL. Most of it is written in
python in a highly modular way, such that researchers can easily swap
components, transform them or write new ones with little effort.

This repo attempts to align with the existing pytorch ecosystem libraries
in that it has a dataset pillar (torchrl/envs), transforms, models, data
utilities (e.g. collectors and containers), etc. TorchRL aims at having as
few dependencies as possible (python standard library, numpy and pytorch).
Common environment libraries (e.g. OpenAI gym) are only optional.

**Content**:
   .. aafig::

     "torchrl"
     │
     ├── "collectors"
     │   └── "collectors.py"
     ├── "data"
     │   ├── "tensor_specs.py"
     │   ├── "postprocs"
     │   │  └── "postprocs.py"
     │   └── "replay_buffers"
     │      ├── "replay_buffers.py"
     │      └── "storages.py"
     ├── "envs"
     │   ├── "common.py"
     │   ├── "env_creator.py"
     │   ├── "gym_like.py"
     │   ├── "vec_env.py"
     │   ├── "libs"
     │   │  ├── "dm_control.py"
     │   │  └── "gym.py"
     │   └── "transforms"
     │      ├── "functional.py"
     │      └── "transforms.py"
     ├── "modules"
     │   ├── "distributions"
     │   │  ├── "continuous.py"
     │   │  └── "discrete.py"
     │   ├── "models"
     │   │  ├── "models.py"
     │   │  └── "exploration.py"
     │   └── "tensordict_module"
     │      ├── "actors.py"
     │      ├── "common.py"
     │      ├── "exploration.py"
     │      ├── "probabilistic.py"
     │      └── "sequence.py"
     ├── "objectives"
     │   ├── "common.py"
     │   ├── "ddpg.py"
     │   ├── "dqn.py"
     │   ├── "functional.py"
     │   ├── "ppo.py"
     │   ├── "redq.py"
     │   ├── "reinforce.py"
     │   ├── "sac.py"
     │   ├── "utils.py"
     │   └── "value"
     │      ├── "advantages.py"
     │      ├── "functional.py"
     │      ├── "pg.py"
     │      ├── "utils.py"
     │      └── "vtrace.py"
     ├── "record"
     │   └── "recorder.py"
     └── "trainers"
         ├── "loggers"
         │  ├── "common.py"
         │  ├── "csv.py"
         │  ├── "mlflow.py"
         │  ├── "tensorboard.py"
         │  └── "wandb.py"
         ├── "trainers.py"
         └── "helpers"
            ├── "collectors.py"
            ├── "envs.py"
            ├── "loggers.py"
            ├── "losses.py"
            ├── "models.py"
            ├── "replay_buffer.py"
            └── "trainers.py"

Unlike other domains, RL is less about media than *algorithms*. As such, it
is harder to make truly independent components.

What TorchRL is not:

* a collection of algorithms: we do not intend to provide SOTA implementations of RL algorithms,
  but we provide these algorithms only as examples of how to use the library.

* a research framework: modularity in TorchRL comes in two flavours. First, we try
  to build re-usable components, such that they can be easily swapped with each other.
  Second, we make our best such that components can be used independently of the rest
  of the library.

TorchRL has very few core dependencies, predominantly PyTorch and numpy. All
other dependencies (gym, torchvision, wandb / tensorboard) are optional.

Data
^^^^

TensorDict
----------

.. GENERATED FROM PYTHON SOURCE LINES 126-131

.. code-block:: Python



    import torch
    from tensordict import TensorDict



.. rst-class:: sphx-glr-script-out

.. code-block:: pytb

    Traceback (most recent call last):
      File "/pytorch/rl/docs/source/reference/generated/tutorials/torchrl_demo.py", line 140, in <module>
        assert multiprocessing.get_start_method() == "fork"
    AssertionError




.. GENERATED FROM PYTHON SOURCE LINES 149-150

Let's create a TensorDict.

.. GENERATED FROM PYTHON SOURCE LINES 150-161

.. code-block:: Python


    batch_size = 5
    tensordict = TensorDict(
        source={
            "key 1": torch.zeros(batch_size, 3),
            "key 2": torch.zeros(batch_size, 5, 6, dtype=torch.bool),
        },
        batch_size=[batch_size],
    )
    print(tensordict)


.. GENERATED FROM PYTHON SOURCE LINES 162-163

You can index a TensorDict as well as query keys.

.. GENERATED FROM PYTHON SOURCE LINES 163-167

.. code-block:: Python


    print(tensordict[2])
    print(tensordict["key 1"] is tensordict.get("key 1"))


.. GENERATED FROM PYTHON SOURCE LINES 168-169

The following shows how to stack multiple TensorDicts.

.. GENERATED FROM PYTHON SOURCE LINES 169-189

.. code-block:: Python


    tensordict1 = TensorDict(
        source={
            "key 1": torch.zeros(batch_size, 1),
            "key 2": torch.zeros(batch_size, 5, 6, dtype=torch.bool),
        },
        batch_size=[batch_size],
    )

    tensordict2 = TensorDict(
        source={
            "key 1": torch.ones(batch_size, 1),
            "key 2": torch.ones(batch_size, 5, 6, dtype=torch.bool),
        },
        batch_size=[batch_size],
    )

    tensordict = torch.stack([tensordict1, tensordict2], 0)
    tensordict.batch_size, tensordict["key 1"]


.. GENERATED FROM PYTHON SOURCE LINES 190-191

Here are some other functionalities of TensorDict.

.. GENERATED FROM PYTHON SOURCE LINES 191-216

.. code-block:: Python


    print(
        "view(-1): ",
        tensordict.view(-1).batch_size,
        tensordict.view(-1).get("key 1").shape,
    )

    print("to device: ", tensordict.to("cpu"))

    # print("pin_memory: ", tensordict.pin_memory())

    print("share memory: ", tensordict.share_memory_())

    print(
        "permute(1, 0): ",
        tensordict.permute(1, 0).batch_size,
        tensordict.permute(1, 0).get("key 1").shape,
    )

    print(
        "expand: ",
        tensordict.expand(3, *tensordict.batch_size).batch_size,
        tensordict.expand(3, *tensordict.batch_size).get("key 1").shape,
    )


.. GENERATED FROM PYTHON SOURCE LINES 217-218

You can create a **nested TensorDict** as well.

.. GENERATED FROM PYTHON SOURCE LINES 218-231

.. code-block:: Python


    tensordict = TensorDict(
        source={
            "key 1": torch.zeros(batch_size, 3),
            "key 2": TensorDict(
                source={"sub-key 1": torch.zeros(batch_size, 2, 1)},
                batch_size=[batch_size, 2],
            ),
        },
        batch_size=[batch_size],
    )
    tensordict


.. GENERATED FROM PYTHON SOURCE LINES 232-234

Replay buffers
------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 234-237

.. code-block:: Python


    from torchrl.data import PrioritizedReplayBuffer, ReplayBuffer


.. GENERATED FROM PYTHON SOURCE LINES 238-243

.. code-block:: Python


    rb = ReplayBuffer(collate_fn=lambda x: x)
    rb.add(1)
    rb.sample(1)


.. GENERATED FROM PYTHON SOURCE LINES 244-248

.. code-block:: Python


    rb.extend([2, 3])
    rb.sample(3)


.. GENERATED FROM PYTHON SOURCE LINES 249-255

.. code-block:: Python


    rb = PrioritizedReplayBuffer(alpha=0.7, beta=1.1, collate_fn=lambda x: x)
    rb.add(1)
    rb.sample(1)
    rb.update_priority(1, 0.5)


.. GENERATED FROM PYTHON SOURCE LINES 256-257

Here are examples of using a replaybuffer with tensordicts.

.. GENERATED FROM PYTHON SOURCE LINES 257-263

.. code-block:: Python


    collate_fn = torch.stack
    rb = ReplayBuffer(collate_fn=collate_fn)
    rb.add(TensorDict({"a": torch.randn(3)}, batch_size=[]))
    len(rb)


.. GENERATED FROM PYTHON SOURCE LINES 264-270

.. code-block:: Python


    rb.extend(TensorDict({"a": torch.randn(2, 3)}, batch_size=[2]))
    print(len(rb))
    print(rb.sample(10))
    print(rb.sample(2).contiguous())


.. GENERATED FROM PYTHON SOURCE LINES 271-280

.. code-block:: Python


    torch.manual_seed(0)
    from torchrl.data import TensorDictPrioritizedReplayBuffer

    rb = TensorDictPrioritizedReplayBuffer(alpha=0.7, beta=1.1, priority_key="td_error")
    rb.extend(TensorDict({"a": torch.randn(2, 3)}, batch_size=[2]))
    tensordict_sample = rb.sample(2).contiguous()
    tensordict_sample


.. GENERATED FROM PYTHON SOURCE LINES 281-284

.. code-block:: Python


    tensordict_sample["index"]


.. GENERATED FROM PYTHON SOURCE LINES 285-299

.. code-block:: Python


    tensordict_sample["td_error"] = torch.rand(2)
    rb.update_tensordict_priority(tensordict_sample)

    for i, val in enumerate(rb._sampler._sum_tree):
        print(i, val)
        if i == len(rb):
            break

    try:
        import gymnasium as gym
    except ModuleNotFoundError:
        import gym


.. GENERATED FROM PYTHON SOURCE LINES 300-302

Envs
^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. GENERATED FROM PYTHON SOURCE LINES 302-309

.. code-block:: Python


    from torchrl.envs.libs.gym import GymEnv, GymWrapper

    gym_env = gym.make("Pendulum-v1")
    env = GymWrapper(gym_env)
    env = GymEnv("Pendulum-v1")


.. GENERATED FROM PYTHON SOURCE LINES 310-314

.. code-block:: Python


    tensordict = env.reset()
    env.rand_step(tensordict)


.. GENERATED FROM PYTHON SOURCE LINES 315-317

Changing environments config
------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 317-321

.. code-block:: Python


    env = GymEnv("Pendulum-v1", frame_skip=3, from_pixels=True, pixels_only=False)
    env.reset()


.. GENERATED FROM PYTHON SOURCE LINES 322-326

.. code-block:: Python


    env.close()
    del env


.. GENERATED FROM PYTHON SOURCE LINES 327-340

.. code-block:: Python


    from torchrl.envs import (
        Compose,
        NoopResetEnv,
        ObservationNorm,
        ToTensorImage,
        TransformedEnv,
    )

    base_env = GymEnv("Pendulum-v1", frame_skip=3, from_pixels=True, pixels_only=False)
    env = TransformedEnv(base_env, Compose(NoopResetEnv(3), ToTensorImage()))
    env.append_transform(ObservationNorm(in_keys=["pixels"], loc=2, scale=1))


.. GENERATED FROM PYTHON SOURCE LINES 341-343

Transforms
------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 343-357

.. code-block:: Python


    from torchrl.envs import (
        Compose,
        NoopResetEnv,
        ObservationNorm,
        StepCounter,
        ToTensorImage,
        TransformedEnv,
    )

    base_env = GymEnv("Pendulum-v1", frame_skip=3, from_pixels=True, pixels_only=False)
    env = TransformedEnv(base_env, Compose(NoopResetEnv(3), ToTensorImage()))
    env.append_transform(ObservationNorm(in_keys=["pixels"], loc=2, scale=1))


.. GENERATED FROM PYTHON SOURCE LINES 358-361

.. code-block:: Python


    env.reset()


.. GENERATED FROM PYTHON SOURCE LINES 362-366

.. code-block:: Python


    print("env: ", env)
    print("last transform parent: ", env.transform[2].parent)


.. GENERATED FROM PYTHON SOURCE LINES 367-369

Vectorized Environments
------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 369-382

.. code-block:: Python


    from torchrl.envs import ParallelEnv

    base_env = ParallelEnv(
        4,
        lambda: GymEnv("Pendulum-v1", frame_skip=3, from_pixels=True, pixels_only=False),
    )
    env = TransformedEnv(
        base_env, Compose(StepCounter(), ToTensorImage())
    )  # applies transforms on batch of envs
    env.append_transform(ObservationNorm(in_keys=["pixels"], loc=2, scale=1))
    env.reset()


.. GENERATED FROM PYTHON SOURCE LINES 383-389

.. code-block:: Python


    print(env.action_spec)

    env.close()
    del env


.. GENERATED FROM PYTHON SOURCE LINES 390-397

Modules
^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Models
------------------------------

Example of a MLP model:

.. GENERATED FROM PYTHON SOURCE LINES 397-400

.. code-block:: Python


    from torch import nn


.. GENERATED FROM PYTHON SOURCE LINES 401-409

.. code-block:: Python


    from torchrl.modules import ConvNet, MLP
    from torchrl.modules.models.utils import SquashDims

    net = MLP(num_cells=[32, 64], out_features=4, activation_class=nn.ELU)
    print(net)
    print(net(torch.randn(10, 3)).shape)


.. GENERATED FROM PYTHON SOURCE LINES 410-411

Example of a CNN model:

.. GENERATED FROM PYTHON SOURCE LINES 411-421

.. code-block:: Python


    cnn = ConvNet(
        num_cells=[32, 64],
        kernel_sizes=[8, 4],
        strides=[2, 1],
        aggregator_class=SquashDims,
    )
    print(cnn)
    print(cnn(torch.randn(10, 3, 32, 32)).shape)  # last tensor is squashed


.. GENERATED FROM PYTHON SOURCE LINES 422-424

TensorDictModules
------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 424-433

.. code-block:: Python


    from tensordict.nn import TensorDictModule

    tensordict = TensorDict({"key 1": torch.randn(10, 3)}, batch_size=[10])
    module = nn.Linear(3, 4)
    td_module = TensorDictModule(module, in_keys=["key 1"], out_keys=["key 2"])
    td_module(tensordict)
    print(tensordict)


.. GENERATED FROM PYTHON SOURCE LINES 434-436

Sequences of Modules
------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 436-451

.. code-block:: Python


    from tensordict.nn import TensorDictSequential

    backbone_module = nn.Linear(5, 3)
    backbone = TensorDictModule(
        backbone_module, in_keys=["observation"], out_keys=["hidden"]
    )
    actor_module = nn.Linear(3, 4)
    actor = TensorDictModule(actor_module, in_keys=["hidden"], out_keys=["action"])
    value_module = MLP(out_features=1, num_cells=[4, 5])
    value = TensorDictModule(value_module, in_keys=["hidden", "action"], out_keys=["value"])

    sequence = TensorDictSequential(backbone, actor, value)
    print(sequence)


.. GENERATED FROM PYTHON SOURCE LINES 452-455

.. code-block:: Python


    print(sequence.in_keys, sequence.out_keys)


.. GENERATED FROM PYTHON SOURCE LINES 456-465

.. code-block:: Python


    tensordict = TensorDict(
        {"observation": torch.randn(3, 5)},
        [3],
    )
    backbone(tensordict)
    actor(tensordict)
    value(tensordict)


.. GENERATED FROM PYTHON SOURCE LINES 466-474

.. code-block:: Python


    tensordict = TensorDict(
        {"observation": torch.randn(3, 5)},
        [3],
    )
    sequence(tensordict)
    print(tensordict)


.. GENERATED FROM PYTHON SOURCE LINES 475-477

Functional Programming (Ensembling / Meta-RL)
----------------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 477-483

.. code-block:: Python


    from tensordict.nn import make_functional

    params = make_functional(sequence)
    len(list(sequence.parameters()))  # functional modules have no parameters


.. GENERATED FROM PYTHON SOURCE LINES 484-487

.. code-block:: Python


    sequence(tensordict, params)


.. GENERATED FROM PYTHON SOURCE LINES 488-495

.. code-block:: Python


    from torch import vmap

    params_expand = params.expand(4)
    tensordict_exp = vmap(sequence, (None, 0))(tensordict, params_expand)
    print(tensordict_exp)


.. GENERATED FROM PYTHON SOURCE LINES 496-498

Specialized Classes
------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 498-511

.. code-block:: Python


    torch.manual_seed(0)
    from torchrl.data import BoundedTensorSpec
    from torchrl.modules import SafeModule

    spec = BoundedTensorSpec(-torch.ones(3), torch.ones(3))
    base_module = nn.Linear(5, 3)
    module = SafeModule(
        module=base_module, spec=spec, in_keys=["obs"], out_keys=["action"], safe=True
    )
    tensordict = TensorDict({"obs": torch.randn(5)}, batch_size=[])
    module(tensordict)["action"]


.. GENERATED FROM PYTHON SOURCE LINES 512-516

.. code-block:: Python


    tensordict = TensorDict({"obs": torch.randn(5) * 100}, batch_size=[])
    module(tensordict)["action"]  # safe=True projects the result within the set


.. GENERATED FROM PYTHON SOURCE LINES 517-530

.. code-block:: Python


    from torchrl.modules import Actor

    base_module = nn.Linear(5, 3)
    actor = Actor(base_module, in_keys=["obs"])
    tensordict = TensorDict({"obs": torch.randn(5)}, batch_size=[])
    actor(tensordict)  # action is the default value

    from tensordict.nn import (
        ProbabilisticTensorDictModule,
        ProbabilisticTensorDictSequential,
    )


.. GENERATED FROM PYTHON SOURCE LINES 531-550

.. code-block:: Python


    # Probabilistic modules
    from torchrl.modules import NormalParamWrapper, TanhNormal

    td = TensorDict({"input": torch.randn(3, 5)}, [3])
    net = NormalParamWrapper(nn.Linear(5, 4))  # splits the output in loc and scale
    module = TensorDictModule(net, in_keys=["input"], out_keys=["loc", "scale"])
    td_module = ProbabilisticTensorDictSequential(
        module,
        ProbabilisticTensorDictModule(
            in_keys=["loc", "scale"],
            out_keys=["action"],
            distribution_class=TanhNormal,
            return_log_prob=False,
        ),
    )
    td_module(td)
    print(td)


.. GENERATED FROM PYTHON SOURCE LINES 551-566

.. code-block:: Python


    # returning the log-probability
    td = TensorDict({"input": torch.randn(3, 5)}, [3])
    td_module = ProbabilisticTensorDictSequential(
        module,
        ProbabilisticTensorDictModule(
            in_keys=["loc", "scale"],
            out_keys=["action"],
            distribution_class=TanhNormal,
            return_log_prob=True,
        ),
    )
    td_module(td)
    print(td)


.. GENERATED FROM PYTHON SOURCE LINES 567-586

.. code-block:: Python


    # Sampling vs mode / mean
    from torchrl.envs.utils import ExplorationType, set_exploration_type

    td = TensorDict({"input": torch.randn(3, 5)}, [3])

    torch.manual_seed(0)
    with set_exploration_type(ExplorationType.RANDOM):
        td_module(td)
        print("random:", td["action"])

    with set_exploration_type(ExplorationType.MODE):
        td_module(td)
        print("mode:", td["action"])

    with set_exploration_type(ExplorationType.MODE):
        td_module(td)
        print("mean:", td["action"])


.. GENERATED FROM PYTHON SOURCE LINES 587-589

Using Environments and Modules
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. GENERATED FROM PYTHON SOURCE LINES 589-617

.. code-block:: Python


    from torchrl.envs.utils import step_mdp

    env = GymEnv("Pendulum-v1")

    action_spec = env.action_spec
    actor_module = nn.Linear(3, 1)
    actor = SafeModule(
        actor_module, spec=action_spec, in_keys=["observation"], out_keys=["action"]
    )

    torch.manual_seed(0)
    env.set_seed(0)

    max_steps = 100
    tensordict = env.reset()
    tensordicts = TensorDict({}, [max_steps])
    for i in range(max_steps):
        actor(tensordict)
        tensordicts[i] = env.step(tensordict)
        if tensordict["done"].any():
            break
        tensordict = step_mdp(tensordict)  # roughly equivalent to obs = next_obs

    tensordicts_prealloc = tensordicts.clone()
    print("total steps:", i)
    print(tensordicts)


.. GENERATED FROM PYTHON SOURCE LINES 618-636

.. code-block:: Python


    # equivalent
    torch.manual_seed(0)
    env.set_seed(0)

    max_steps = 100
    tensordict = env.reset()
    tensordicts = []
    for _ in range(max_steps):
        actor(tensordict)
        tensordicts.append(env.step(tensordict))
        if tensordict["done"].any():
            break
        tensordict = step_mdp(tensordict)  # roughly equivalent to obs = next_obs
    tensordicts_stack = torch.stack(tensordicts, 0)
    print("total steps:", i)
    print(tensordicts_stack)


.. GENERATED FROM PYTHON SOURCE LINES 637-640

.. code-block:: Python


    (tensordicts_stack == tensordicts_prealloc).all()


.. GENERATED FROM PYTHON SOURCE LINES 641-652

.. code-block:: Python


    torch.manual_seed(0)
    env.set_seed(0)
    tensordict_rollout = env.rollout(policy=actor, max_steps=max_steps)
    tensordict_rollout


    (tensordict_rollout == tensordicts_prealloc).all()

    from tensordict.nn import TensorDictModule


.. GENERATED FROM PYTHON SOURCE LINES 653-655

Collectors
^^^^^^^^^^

.. GENERATED FROM PYTHON SOURCE LINES 655-661

.. code-block:: Python


    from torchrl.collectors import MultiaSyncDataCollector, MultiSyncDataCollector

    from torchrl.envs import EnvCreator, ParallelEnv
    from torchrl.envs.libs.gym import GymEnv


.. GENERATED FROM PYTHON SOURCE LINES 662-663

EnvCreator makes sure that we can send a lambda function from process to process

.. GENERATED FROM PYTHON SOURCE LINES 663-670

.. code-block:: Python


    parallel_env = ParallelEnv(3, EnvCreator(lambda: GymEnv("Pendulum-v1")))
    create_env_fn = [parallel_env, parallel_env]

    actor_module = nn.Linear(3, 1)
    actor = TensorDictModule(actor_module, in_keys=["observation"], out_keys=["action"])


.. GENERATED FROM PYTHON SOURCE LINES 671-672

Sync data collector

.. GENERATED FROM PYTHON SOURCE LINES 672-685

.. code-block:: Python


    devices = ["cpu", "cpu"]

    collector = MultiSyncDataCollector(
        create_env_fn=create_env_fn,  # either a list of functions or a ParallelEnv
        policy=actor,
        total_frames=240,
        max_frames_per_traj=-1,  # envs are terminating, we don't need to stop them early
        frames_per_batch=60,  # we want 60 frames at a time (we have 3 envs per sub-collector)
        storing_devices=devices,  # len must match len of env created
        devices=devices,
    )


.. GENERATED FROM PYTHON SOURCE LINES 686-695

.. code-block:: Python


    for i, d in enumerate(collector):
        if i == 0:
            print(d)  # trajectories are split automatically in [6 workers x 10 steps]
        collector.update_policy_weights_()  # make sure that our policies have the latest weights if working on multiple devices
    print(i)
    collector.shutdown()
    del collector


.. GENERATED FROM PYTHON SOURCE LINES 696-718

.. code-block:: Python


    # async data collector: keeps working while you update your model
    collector = MultiaSyncDataCollector(
        create_env_fn=create_env_fn,  # either a list of functions or a ParallelEnv
        policy=actor,
        total_frames=240,
        max_frames_per_traj=-1,  # envs are terminating, we don't need to stop them early
        frames_per_batch=60,  # we want 60 frames at a time (we have 3 envs per sub-collector)
        storing_devices=devices,  # len must match len of env created
        devices=devices,
    )

    for i, d in enumerate(collector):
        if i == 0:
            print(d)  # trajectories are split automatically in [6 workers x 10 steps]
        collector.update_policy_weights_()  # make sure that our policies have the latest weights if working on multiple devices
    print(i)
    collector.shutdown()
    del collector
    del create_env_fn
    del parallel_env


.. GENERATED FROM PYTHON SOURCE LINES 719-721

Objectives
^^^^^^^^^^

.. GENERATED FROM PYTHON SOURCE LINES 721-742

.. code-block:: Python


    # TorchRL delivers meta-RL compatible loss functions
    # Disclaimer: This APi may change in the future
    from torchrl.objectives import DDPGLoss

    actor_module = nn.Linear(3, 1)
    actor = TensorDictModule(actor_module, in_keys=["observation"], out_keys=["action"])


    class ConcatModule(nn.Linear):
        def forward(self, obs, action):
            return super().forward(torch.cat([obs, action], -1))


    value_module = ConcatModule(4, 1)
    value = TensorDictModule(
        value_module, in_keys=["observation", "action"], out_keys=["state_action_value"]
    )

    loss_fn = DDPGLoss(actor, value, gamma=0.99)


.. GENERATED FROM PYTHON SOURCE LINES 743-759

.. code-block:: Python


    tensordict = TensorDict(
        {
            "observation": torch.randn(10, 3),
            "next": {
                "observation": torch.randn(10, 3),
                "reward": torch.randn(10, 1),
                "done": torch.zeros(10, 1, dtype=torch.bool),
            },
            "action": torch.randn(10, 1),
        },
        batch_size=[10],
        device="cpu",
    )
    loss_td = loss_fn(tensordict)


.. GENERATED FROM PYTHON SOURCE LINES 760-763

.. code-block:: Python


    print(loss_td)


.. GENERATED FROM PYTHON SOURCE LINES 764-767

.. code-block:: Python


    print(tensordict)


.. GENERATED FROM PYTHON SOURCE LINES 768-787

State of the Library
^^^^^^^^^^^^^^^^^^^^

TorchRL is currently an **alpha-release**: there may be bugs and there is no
guarantee about BC-breaking changes. We should be able to move to a beta-release
by the end of the year. Our roadmap to get there comprises:

- Distributed solutions
- Offline RL
- Greater support for meta-RL
- Multi-task and hierarchical RL

Contributing
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

We are actively looking for contributors and early users. If you're working in
RL (or just curious), try it! Give us feedback: what will make the success of
TorchRL is how well it covers researchers needs. To do that, we need their input!
Since the library is nascent, it is a great time for you to shape it the way you want!

.. GENERATED FROM PYTHON SOURCE LINES 789-793

Installing the Library
^^^^^^^^^^^^^^^^^^^^^^

The library is on PyPI: *pip install torchrl*


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 0.309 seconds)

**Estimated memory usage:**  549 MB


.. _sphx_glr_download_tutorials_torchrl_demo.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: torchrl_demo.ipynb <torchrl_demo.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: torchrl_demo.py <torchrl_demo.py>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
